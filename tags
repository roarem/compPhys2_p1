!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Hamiltonian	Hamiltonian/Hamiltonian.cpp	/^Hamiltonian::Hamiltonian (class System* system)$/;"	f	class:Hamiltonian
Hamiltonian	Hamiltonian/Hamiltonian.h	/^class Hamiltonian$/;"	c
Hamiltonian	Hamiltonian/hamiltonian.h	/^class Hamiltonian$/;"	c
HarmonicOscillator	Hamiltonian/HarmonicOscillator.cpp	/^HarmonicOscillator::HarmonicOscillator (System* system, double omega) :$/;"	f	class:HarmonicOscillator
HarmonicOscillator	Hamiltonian/HarmonicOscillator.h	/^class HarmonicOscillator : public Hamiltonian$/;"	c
HarmonicOscillatorAna	Hamiltonian/HarmonicOscillatorAna.cpp	/^HarmonicOscillatorAna::HarmonicOscillatorAna (System* system, double omega) :$/;"	f	class:HarmonicOscillatorAna
HarmonicOscillatorAna	Hamiltonian/HarmonicOscillatorAna.h	/^class HarmonicOscillatorAna : public Hamiltonian$/;"	c
InitialState	InitialState/InitialState.cpp	/^InitialState::InitialState(System* system)$/;"	f	class:InitialState
InitialState	InitialState/InitialState.h	/^class InitialState$/;"	c
Particle	System/Particle.cpp	/^Particle::Particle(){}$/;"	f	class:Particle
Particle	System/Particle.h	/^class Particle {$/;"	c
RandomUniform	InitialState/RandomUniform.cpp	/^RandomUniform::RandomUniform( System* system,$/;"	f	class:RandomUniform
RandomUniform	InitialState/RandomUniform.h	/^class RandomUniform : public InitialState$/;"	c
Sampler	System/Sampler.cpp	/^Sampler::Sampler(System* system){$/;"	f	class:Sampler
Sampler	System/Sampler.h	/^class Sampler {$/;"	c
System	System/System.h	/^class System$/;"	c
TrialWaveFunction	WaveFunction/TrialWaveFunction.cpp	/^TrialWaveFunction::TrialWaveFunction (System* system,$/;"	f	class:TrialWaveFunction
TrialWaveFunction	WaveFunction/TrialWaveFunction.h	/^class TrialWaveFunction : public WaveFunction$/;"	c
TrialWaveFunctionAna	WaveFunction/TrialWaveFunctionAna.cpp	/^TrialWaveFunctionAna::TrialWaveFunctionAna (System* system,$/;"	f	class:TrialWaveFunctionAna
TrialWaveFunctionAna	WaveFunction/TrialWaveFunctionAna.h	/^class TrialWaveFunctionAna : public WaveFunction$/;"	c
WaveFunction	WaveFunction/WaveFunction.cpp	/^WaveFunction::WaveFunction (System* system)$/;"	f	class:WaveFunction
WaveFunction	WaveFunction/WaveFunction.h	/^class WaveFunction$/;"	c
add_particle	System/System.cpp	/^void System::add_particle (Particle* particle)$/;"	f	class:System
changePosition	System/Particle.cpp	/^void Particle::changePosition (int dimension, double movement)$/;"	f	class:Particle
clock	InitialState/RandomUniform.h	/^    typedef   std::chrono::high_resolution_clock clock;$/;"	t	class:RandomUniform
clock	System/System.h	/^    typedef std::chrono::high_resolution_clock clock;$/;"	t	class:System
computeEnergy	WaveFunction/TrialWaveFunction.cpp	/^double TrialWaveFunction::computeEnergy ()$/;"	f	class:TrialWaveFunction
computeEnergy	WaveFunction/TrialWaveFunctionAna.cpp	/^double TrialWaveFunctionAna::computeEnergy()$/;"	f	class:TrialWaveFunctionAna
computeLocalEnergy	Hamiltonian/HarmonicOscillator.cpp	/^double HarmonicOscillator::computeLocalEnergy ()$/;"	f	class:HarmonicOscillator
computeLocalEnergy	Hamiltonian/HarmonicOscillatorAna.cpp	/^double HarmonicOscillatorAna::computeLocalEnergy ()$/;"	f	class:HarmonicOscillatorAna
cumulativeAcceptanceRate	System/Sampler.h	/^    double  cumulativeAcceptanceRate  = 0;$/;"	m	class:Sampler
cumulativeEnergy	System/Sampler.h	/^    double  cumulativeEnergy	      = 0;$/;"	m	class:Sampler
cumulativeEnergy2	System/Sampler.h	/^    double  cumulativeEnergy2	      = 0;$/;"	m	class:Sampler
evaluate	WaveFunction/TrialWaveFunction.cpp	/^double TrialWaveFunction::evaluate ()$/;"	f	class:TrialWaveFunction
evaluate	WaveFunction/TrialWaveFunctionAna.cpp	/^double TrialWaveFunctionAna::evaluate ()$/;"	f	class:TrialWaveFunctionAna
get_cumuEn	System/Sampler.h	/^    double get_cumuEn (){return cumulativeEnergy;}$/;"	f	class:Sampler
get_derivativeStep	System/System.h	/^    double  get_derivativeStep	    	(){return my_derivativeStep;}$/;"	f	class:System
get_derivativeStep2	System/System.h	/^    double  get_derivativeStep2	    	(){return my_derivativeStep2;}$/;"	f	class:System
get_hamiltonian	System/System.h	/^    class Hamiltonian*		  get_hamiltonian()	{return my_hamiltonian;}$/;"	f	class:System
get_nDimensions	System/System.h	/^    int	    get_nDimensions		(){return my_nDimensions;}$/;"	f	class:System
get_nParameters	WaveFunction/WaveFunction.h	/^    int get_nParameters () {return my_nParameters;}$/;"	f	class:WaveFunction
get_nParticles	System/System.h	/^    int     get_nParticles	    	(){return my_nParticles;}$/;"	f	class:System
get_parameters	System/System.h	/^    std::vector<double> get_parameters	(){return my_parameters;}$/;"	f	class:System
get_parameters	WaveFunction/WaveFunction.h	/^    std::vector<double> get_parameters() {return my_parameters;}$/;"	f	class:WaveFunction
get_particle	System/System.h	/^    std::vector<class Particle*>  get_particle()	{return my_particles;}$/;"	f	class:System
get_particles	InitialState/InitialState.h	/^    std::vector<class Particle*> get_particles() {return my_particles;}$/;"	f	class:InitialState
get_position	System/Particle.h	/^    std::vector<double> get_position() {return my_position;}$/;"	f	class:Particle
get_sampler	System/System.h	/^    class Sampler*		  get_sampler()		{return	my_sampler;}$/;"	f	class:System
get_stepLength	System/System.h	/^    double  get_stepLength	    	(){return my_stepLength;}$/;"	f	class:System
get_waveFunction	System/System.h	/^    class WaveFunction*		  get_waveFunction()	{return my_waveFunction;}$/;"	f	class:System
main	main/main.cpp	/^int main (){$/;"	f
metropolis	System/System.cpp	/^bool System::metropolis ()$/;"	f	class:System
my_derivativeStep	System/System.h	/^    double my_derivativeStep	     = 0.0;$/;"	m	class:System
my_derivativeStep2	System/System.h	/^    double my_derivativeStep2	     = 0.0;$/;"	m	class:System
my_equilibrationFraction	System/System.h	/^    double my_equilibrationFraction  = 0.0;$/;"	m	class:System
my_generator	System/System.h	/^    std::default_random_engine my_generator;$/;"	m	class:System
my_hamiltonian	System/System.h	/^    class Hamiltonian*	    my_hamiltonian    = nullptr;$/;"	m	class:System	typeref:class:System::Hamiltonian
my_initialState	System/System.h	/^    class InitialState*	    my_initialState   = nullptr;$/;"	m	class:System	typeref:class:System::InitialState
my_nCycles	System/Sampler.h	/^    int	    my_nCycles		      = 0;$/;"	m	class:Sampler
my_nCycles	System/System.h	/^    int my_nCycles		     = 0;$/;"	m	class:System
my_nDimensions	InitialState/InitialState.h	/^    int my_nDimensions	= 0;$/;"	m	class:InitialState
my_nDimensions	System/Particle.h	/^    int my_nDimensions	  = 0;$/;"	m	class:Particle
my_nDimensions	System/System.h	/^    int my_nDimensions		     = 0;$/;"	m	class:System
my_nParameters	WaveFunction/WaveFunction.h	/^    int	my_nParameters	= 0;$/;"	m	class:WaveFunction
my_nParticles	InitialState/InitialState.h	/^    int my_nParticles	= 0;$/;"	m	class:InitialState
my_nParticles	System/System.h	/^    int my_nParticles		     = 0;$/;"	m	class:System
my_omega	Hamiltonian/HarmonicOscillator.h	/^    double my_omega   = 0;$/;"	m	class:HarmonicOscillator
my_omega	Hamiltonian/HarmonicOscillatorAna.h	/^    double my_omega   = 0;$/;"	m	class:HarmonicOscillatorAna
my_parameters	System/System.h	/^    std::vector<double> my_parameters = std::vector<double>();$/;"	m	class:System
my_parameters	WaveFunction/WaveFunction.h	/^    std::vector<double> my_parameters = std::vector<double>();$/;"	m	class:WaveFunction
my_particles	InitialState/InitialState.h	/^    std::vector<class Particle*> my_particles;$/;"	m	class:InitialState
my_particles	System/System.h	/^    std::vector<class Particle*> my_particles = std::vector<class Particle*>();$/;"	m	class:System
my_position	System/Particle.h	/^    std::vector<double>	my_position = std::vector<double>();$/;"	m	class:Particle
my_sampler	System/System.h	/^    class Sampler*	    my_sampler	      = nullptr;$/;"	m	class:System	typeref:class:System::Sampler
my_start	InitialState/RandomUniform.h	/^    clock::time_point my_start = clock::now();$/;"	m	class:RandomUniform
my_start	System/System.h	/^    clock::time_point my_start = clock::now();$/;"	m	class:System
my_stepLength	System/System.h	/^    double my_stepLength	     = 0.0;$/;"	m	class:System
my_stepNumber	System/Sampler.h	/^    int	    my_stepNumber	      = 0;$/;"	m	class:Sampler
my_system	Hamiltonian/Hamiltonian.h	/^    class System* my_system = nullptr;$/;"	m	class:Hamiltonian	typeref:class:Hamiltonian::System
my_system	Hamiltonian/hamiltonian.h	/^    class System* my_system = nullptr;$/;"	m	class:Hamiltonian	typeref:class:Hamiltonian::System
my_system	InitialState/InitialState.h	/^    class System* my_system = nullptr;$/;"	m	class:InitialState	typeref:class:InitialState::System
my_system	System/Sampler.h	/^    class   System* my_system	      = nullptr;$/;"	m	class:Sampler	typeref:class:Sampler::System
my_system	WaveFunction/WaveFunction.h	/^    class System* my_system = nullptr;$/;"	m	class:WaveFunction	typeref:class:WaveFunction::System
my_waveFunction	System/System.h	/^    class WaveFunction*	    my_waveFunction   = nullptr;$/;"	m	class:System	typeref:class:System::WaveFunction
printResults	System/Sampler.cpp	/^void Sampler::printResults ()$/;"	f	class:Sampler
runMetropolis	System/System.cpp	/^void System::runMetropolis (int nCycles)$/;"	f	class:System
sample	System/Sampler.cpp	/^void Sampler::sample (bool accepted)$/;"	f	class:Sampler
seed	InitialState/RandomUniform.h	/^    unsigned  seed;$/;"	m	class:RandomUniform
set_Hamiltonian	System/System.cpp	/^void System::set_Hamiltonian (Hamiltonian* hamiltonian)$/;"	f	class:System
set_InitialState	System/System.cpp	/^void System::set_InitialState (InitialState* initialState)$/;"	f	class:System
set_WaveFunction	System/System.cpp	/^void System::set_WaveFunction (WaveFunction* waveFunction)$/;"	f	class:System
set_derivativeStep	System/System.cpp	/^void System::set_derivativeStep (double h)$/;"	f	class:System
set_equilibrationFraction	System/System.cpp	/^void System::set_equilibrationFraction (double equilibraFraction)$/;"	f	class:System
set_nCycles	System/System.cpp	/^void System::set_nCycles (int nCycles)$/;"	f	class:System
set_nDimensions	System/Particle.cpp	/^void Particle::set_nDimensions (int nDimensions)$/;"	f	class:Particle
set_nDimensions	System/System.cpp	/^void System::set_nDimensions (int nDimensions)$/;"	f	class:System
set_nParticles	System/System.cpp	/^void System::set_nParticles (int nParticles)$/;"	f	class:System
set_parameters	System/System.cpp	/^void System::set_parameters (std::vector<double> parameters)$/;"	f	class:System
set_position	System/Particle.cpp	/^void Particle::set_position (const std::vector<double> &position)$/;"	f	class:Particle
set_stepLength	System/System.cpp	/^void System::set_stepLength (double stepLength)$/;"	f	class:System
setupInitialState	InitialState/RandomUniform.cpp	/^void RandomUniform::setupInitialState ()$/;"	f	class:RandomUniform
